name: Release

on:
  push:
    branches: [main]

jobs:
  release-on-push:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: npm
      - run: npm ci
      - name: Release
        id: release
        uses: actions/github-script@v6
        env:
          # list of labels that block bumping the version
          STRICT_NO_RELEASE_LABELS: |
            norelease
        with:
          result-encoding: string
          script: |
            const fs = require('fs');
            const semver = require('semver');
            const { version } = JSON.parse(fs.readFileSync('./package.json'));
            const tag = `v${version}`;
            const { owner, repo } = context.repo;
            const blockingLabels = process.env.STRICT_NO_RELEASE_LABELS.split('\n');
            const labels = [];
            (await Promise.all(context.payload.commits.map(commit => github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner,
              repo,
              commit_sha: commit.id,
            })))).forEach(({ data }) => {
              data.forEach(pr => labels.push(...pr.labels.map(label => label.name)));
            });
            if(blockingLabels.some(label => labels.includes(label)) 
              || context.payload.commits.some(commit => commit.message.includes('norelease'))) {
                console.log('Aborting release');
                return;
            }
            try {
              const { data: { id } } = await github.rest.repos.getReleaseByTag({
                owner,
                repo,
                tag,
              });
              console.log(`Updating release ${tag}`);
              const res = await github.rest.repos.updateRelease({
                owner,
                repo,
                release_id: id
              });
              console.log(`View ${tag} at ${res.data.html_url}`);
              return null;
            } catch(error) {
              console.log(`Releasing ${tag}`);
              const body = `**View the [CHANGELOG](CHANGELOG.md)**\n`;
              /*
                const { name, email } = context.payload.pusher;
                await github.rest.git.createTag({
                  owner,
                  repo,
                  tag,
                  message: tag,
                  object: context.payload.after,
                  type: 'commit',
                  tagger:{
                    name,
                    email
                  }
                });
                await github.rest.git.createRef({
                  owner,
                  repo,
                  ref: `refs/tags/${tag}`,
                  sha: context.payload.after,
                });
              */
              const res = await github.rest.repos.createRelease({
                owner,
                repo,
                tag_name: tag,
                body,
                generate_release_notes: true,
                prerelease: !!semver.prerelease(version)
              });
              console.log(`View ${tag} at ${res.data.html_url}`);
              return JSON.stringify(res.data);
            }
      - name: Publish
        if: fromJSON(steps.release.outputs.result)
        env:
          TAG_NAME: ${{ fromJSON(steps.release.outputs.result).tag_name }}
          PRERELEASE: ${{ (fromJSON(steps.release.outputs.result).prerelease && '--tag beta') || '' }}
          PRERELEASE_TAG: beta
        run: |
          npm run build
          npm publish --tag ${{ env.TAG_NAME }} ${{ env.PRERELEASE }}
