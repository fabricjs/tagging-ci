name: "🏷️"

on:
  pull_request:
    branches: [main]
  pull_request_review:
    types: [submitted, dismissed]

jobs:
  main-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ env.BASE_VERSION }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main
      - name: base version
        run: echo "BASE_VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV
  bump-version:
    name: bump version
    runs-on: ubuntu-latest
    needs: main-version
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - name: Setup git
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: npm
      - run: npm ci
      - name: Bump Version
        id: inc-version
        uses: actions/github-script@v6
        env:
          # list of labels that block bumping the version
          STRICT_NO_RELEASE_TAGS: |
            norelease
          # list of labels that shouldn't bump the version by default
          # adding a release label overrides this configuration
          NO_RELEASE_TAGS: |
            CI/CD
            docs
          BASE_VERSION: ${{ needs.main-version.outputs.version }}
          PRERELEASE_TAG: beta
        with:
          result-encoding: string
          script: |
            const { execSync } = require('child_process');
            const fs = require('fs');
            const semver = require('semver');
            const version = process.env.BASE_VERSION;
            const { version: headVersion } = JSON.parse(fs.readFileSync('./package.json'));
            const blockingTags = process.env.STRICT_NO_RELEASE_TAGS.split('\n');
            const nonBlockingTags = process.env.NO_RELEASE_TAGS.split('\n');
            const { labels } = context.payload.pull_request;

            // reset version
            fs.writeFileSync('./package.json', JSON.stringify({ 
              ...JSON.parse(fs.readFileSync('./package.json')), 
              version
            }, null, 2));

            execSync('git add package.json');
            execSync('git commit -m "revert package.json version"');

            // get version level from PR label
            const LABEL_PREFIX = 'release:';
            const releaseLabels = labels
              .map((label) => label.name)
              .filter((label) => label.startsWith(LABEL_PREFIX));
            if (releaseLabels.length > 1) {
              throw new Error(`Found more than one release label: ${releaseLabels.join(', ')}`);
            }
            const releaseLevel = releaseLabels[0]?.replace(LABEL_PREFIX, '');
            let shouldBump = !labels.some((label) => blockingTags.includes(label.name));
            if (!releaseLevel && shouldBump) {
              shouldBump = !labels.some((label) => nonBlockingTags.includes(label.name));
            }
            if (shouldBump) {
              let tag;
              const incLevel = releaseLabels[0]?.replace(LABEL_PREFIX, '') || 'prerelease';
              try {
                tag = execSync(`npm version ${incLevel} --preid ${process.env.PRERELEASE_TAG}`).toString();
              } catch(error) {
                console.log('Failed to bump version', error);
              }
              console.log({tag});
              try {
                execSync('git push');
              } catch(error) {
                console.log('Failed to push', error);
              }
              return tag;
            }
            return '';
